public-f net.minecraft.world.level.block.state.BlockBehaviour properties # properties
public-f net.minecraft.world.level.block.state.BlockBehaviour$Properties destroyTime # destroyTime
public-f net.minecraft.world.level.block.state.BlockBehaviour$Properties soundType # soundType
public net.minecraft.data.DataGenerator$PackGenerator <init>(Lnet/minecraft/data/DataGenerator;ZLjava/lang/String;Lnet/minecraft/data/PackOutput;)V # PackGenerator
public net.minecraft.world.level.levelgen.SurfaceRules$SequenceRuleSource
public-f net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator settings # settings




# How fun.
public net.minecraft.core.RegistrySetBuilder$BuildState
public net.minecraft.core.RegistrySetBuilder$RegistryContents
public net.minecraft.core.RegistrySetBuilder$RegistryStub
public net.minecraft.core.RegistrySetBuilder$UniversalLookup
public net.minecraft.core.RegistrySetBuilder entries # entries
public net.minecraft.core.RegistrySetBuilder$LazyHolder
public net.minecraft.core.Holder$Reference bindValue(Ljava/lang/Object;)V # bindValue
public net.minecraft.core.RegistrySetBuilder$LazyHolder bindValue(Ljava/lang/Object;)V # bindValue
public net.minecraft.core.RegistrySetBuilder$UniversalLookup holders # holders
public net.minecraft.core.RegistrySetBuilder createLazyFullPatchedRegistries(Lnet/minecraft/core/RegistryAccess;Lnet/minecraft/core/HolderLookup$Provider;Lnet/minecraft/core/Cloner$Factory;Ljava/util/Map;Lnet/minecraft/core/HolderLookup$Provider;)Lnet/minecraft/core/HolderLookup$Provider; # createLazyFullPatchedRegistries
public net.minecraft.core.RegistrySetBuilder createState(Lnet/minecraft/core/RegistryAccess;)Lnet/minecraft/core/RegistrySetBuilder$BuildState; # createStatea
public net.minecraft.core.RegistrySetBuilder buildProviderWithContext(Lnet/minecraft/core/RegistrySetBuilder$UniversalOwner;Lnet/minecraft/core/RegistryAccess;Ljava/util/stream/Stream;)Lnet/minecraft/core/HolderLookup$Provider; # buildProviderWithContext

